---
// https://codepen.io/zremboldt/pen/ZvQjOG

// https://www.smashingmagazine.com/2020/02/magic-flip-cards-common-sizing-problem/

const { ...rest } = Astro.props;
---

<div class="card__container" {...rest}>
  <div class="card__wrapper">
    <div class="card-front">
      <slot name="card_front" />
    </div>
    <div class="card-back">
      <slot name="card_back" />
    </div>
  </div>
</div>

<style lang="scss" is:global>
  .card__wrapper {
    position: relative;
  }

  .card-front {
    // position: absolute;
    // top: 0;
    // left: 0;
    // z-index: 100;
    width: 100%;
    opacity: 1;
    transition: opacity 0.3s ease;
    visibility: visible;
  }
  .card-back {
    position: absolute;
    top: 0;
    left: 0;
    z-index: 10;
    width: 100%;
    opacity: 0;
    transition: opacity 0.3s ease;
    visibility: hidden;
  }

  .card__container.active {
    .card-front {
      z-index: 10;
      opacity: 0;
      visibility: hidden;
    }
    .card-back {
      z-index: 100;
      opacity: 1;
      visibility: visible;
    }
  }
  .card-back,
  .card-back > .card {
    height: 100%;
  }
</style>
<script>
  // select front_card and return button only: .side.front, btn__return

  // aideveloper v1.1
  // This script dynamically adjusts the height of card containers. When a card is active,
  // it expands to fit the content of card-back, otherwise, all cards have equal height.

  document.addEventListener("DOMContentLoaded", () => {
    const cardContainers = document.querySelectorAll(".card__container");

    cardContainers.forEach((container) => {
      const wrapper = container.querySelector(".card__wrapper");
      const front = container.querySelector(".card-front");
      const back = container.querySelector(".card-back");
      const back_header = back.querySelector(".card .card-header");
      const back_body = back.querySelector(".card .card-body");

      // Helper function to set height with transition
      const setHeightWithTransition = () => {
        let back_child_height =
          back_header.offsetHeight + back_body.offsetHeight;

        let maxHeight = Math.max(front.offsetHeight, back_child_height);

        if (container.classList.contains("active")) {
          // maxHeight = back_child_height;
          // console.log(back_child_height);
          // maxHeight = back.offsetHeight;
          container.style.height = `${maxHeight}px`;
          wrapper.style.height = `${maxHeight}px`;
          back.style.height = `${maxHeight}px`;
        } else {
          container.style.height = `auto`;
          wrapper.style.height = `auto`;
        }
      };

      // Initial set
      setHeightWithTransition();

      // Add transition
      container.style.transition = "height 0.3s ease-in-out";
      wrapper.style.transition = "height 0.3s ease-in-out";

      // Listen for changes in height
      const resizeObserver = new ResizeObserver(() =>
        setHeightWithTransition()
      );
      resizeObserver.observe(front);
      resizeObserver.observe(back);

      // Listen for class changes on container
      const classObserver = new MutationObserver(() =>
        setHeightWithTransition()
      );
      classObserver.observe(container, {
        attributes: true,
        attributeFilter: ["class"],
      });

      // Flipping logic
      cardContainers.forEach((card) => {
        const buttons = card.querySelectorAll(
          ".btn.btn__cardflip, .card-img-top"
        );
        buttons.forEach((btn) => {
          btn.addEventListener("click", () => {
            if (card.classList.contains("active")) {
              card.classList.remove("active");
            } else {
              card.classList.add("active");
            }
            // card.classList.toggle("active");
            setHeightWithTransition(); // Update height when flipped
          });
        });
      });
    });
  });
</script>
